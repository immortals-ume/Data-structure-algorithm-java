Data Structure : Tree
1. (BST - Binary Search Tree)  | Time Complexity  is directly proportional to Height Of tree
  a. tree consist of key and satellite data , in addition to previous values it also consists of left, right , parent which       points to respective left child and right child and its parent.
  b. if child or parent is missing , the appropriate attributes contains the value as NULL.
  c. the root node is only node whose parent is NIL

  Representation of BST : refer TreeNode.java

  BST-property
     let x be a node in BST , if y is a node in the left subtree of x then y.key <= x.key.
                            , if y is a node in the right subtree of x then y.key >= x.key.

  Traversing a BST .
  a. Inorder Tree Walk : left subtree  -> parent node -> Right Subtree
  b. Preorder Tree Walk : parent node -> left subtree -> right subtree
  c. Postorder Tree Walk : left subtree -> right subtree -> parent node


  Querying a BST

  a. Searching an element in BST
  b. DEPTH FIRST SEARCH
  c. BREADTH FIRST SEARCH
  d. Finding a MIN and MAX of BST
  e. finding a successor or predecessor in BST
  f. Insertion in BST
  g. deletion in BST
